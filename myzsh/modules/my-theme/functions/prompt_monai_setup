prompt_monai_help() {
  cat <<EOH
Right prompt can show Node.js and Ruby versions, and current Python virtualenv.

  prompt monai [node [python [ruby]]]

Argument order is respected.
EOH
}

prompt_monai_precmd() {
  line_prompt_string
  if (( $+functions[git-info] )); then
    git-info
  fi

  if (( $+functions[node-info] )); then
    node-info
  fi

  if (( $+functions[ruby-info] )); then
    ruby-info
  fi

  if (( $+functions[python-info] )); then
    python-info
  fi
}

prompt_monai_setup() {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  if [ -n "$MC_SID" ]; then
    return
  fi

  set -A versions "$@"

  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook to set up prompt parameters before each command.
  add-zsh-hook precmd prompt_monai_precmd

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'

  zstyle ':prezto:module:git:info:branch'    format "%{${FG[blue]}%}(%b)%{${FX[reset]}%}"
  zstyle ':prezto:module:git:info:ahead'     format "%{${FG[red]}%}A%A%{${FX[reset]}%}"
  zstyle ':prezto:module:git:info:behind'    format "%{${FG[cyan]}%}B%B%{${FX[reset]}%}"
  zstyle ':prezto:module:git:info:unmerged'  format "%{${FX[bold]}${FG[magenta]}%}⚡︎%{${FX[reset]}%}"
  zstyle ':prezto:module:git:info:untracked' format "%{${FX[bold]}${FG[red]}%}u%{${FX[reset]}%}"
  zstyle ':prezto:module:git:info:modified'  format "%{${FX[bold]}${FG[yellow]}%}m%{${FX[reset]}%}"
  zstyle ':prezto:module:git:info:added'     format "%{${FX[bold]}${FG[green]}%}a%{${FX[reset]}%}"
  zstyle ':prezto:module:git:info:keys'      format 'branch' '%b' 'status' '%A%B%U%u%m%a'

  zstyle ':prezto:module:node:info:version'      format "%{${FG[bright_green]}%}[%v]%{${FX[reset]}%}"
  zstyle ':prezto:module:ruby:info:version'      format "%{${FG[bright_red]}%}[%v]%{${FX[reset]}%}"
  zstyle ':prezto:module:python:info:virtualenv' format "%{${FG[bright_blue]}%}[%v]%{${FX[reset]}%}"

  zstyle ':prezto:module:editor:info:keymap:primary'           format '' #'» '
  zstyle ':prezto:module:editor:info:keymap:primary:insert'    format '' #'[i] '
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '[o] '
  zstyle ':prezto:module:editor:info:keymap:alternate'         format '« '
  zstyle ':prezto:module:editor:info:completing'               format '⋯'

  # Define prompts.
  PROMPT=''
  PROMPT+='$(sudo_prompt_string)'
  PROMPT+='$(ssh_prompt_string)'
  PROMPT+='%~ '
  PROMPT+='$(git_prompt_string)'
  PROMPT+='$(editor_prompt_string)'

  RPROMPT=''
  RPROMPT+='$(version_prompt_string)'
  RPROMPT+='$(retval_prompt_string)'
}

line_prompt_string() {
  echo "${(l:$COLUMNS::―:)}"
}

sudo_prompt_string() {
  if [ -n "${SUDO_USER}" ] && [ "${USER}" != "${SUDO_USER}" ]; then
    echo "%{${FG[red]}%}#%{${FX[reset]}%} "
  fi
}

ssh_prompt_string() {
  if [ -n "${SSH_CLIENT}" ]; then
    echo "%{${FG[green]}%}@%{${FX[reset]}%} "
  fi
}

git_prompt_string() {
  local out=''
  out+="${git_info:+${(e)git_info[branch]} }"
  if [ "${git_info[status]}" ]; then
    out+="%{${FG[green]}%}[%{${FX[reset]}%}"
    out+="${(e)git_info[status]}"
    out+="%{${FG[green]}%}]%{${FX[reset]}%} "
  fi
  echo "$out"
}

editor_prompt_string() {
  echo "%{${FG[yellow]}%}${(j//)editor_info}%{${FX[reset]}%}"
}

version_prompt_string() {
  set -A out

  for v in $versions; do
    case $v in
      node )
        out+="${node_info[version]}"
        ;;
      ruby )
        out+="${ruby_info[version]}"
        ;;
      python )
        out+="${python_info[virtualenv]}"
        ;;
    esac
  done
  echo "${(j/ /)out}"
}

retval_prompt_string() {
  echo "%{${FG[bright_red]}%}%(?.. [%?])%{${FX[reset]}%}"
}

prompt_monai_preview() {
  prompt_preview_theme monai "$@"
}

prompt_monai_setup "$@"
